// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkUser = `-- name: CheckUser :one
SELECT id, create_at, update_at, name FROM users
WHERE name = $1
`

func (q *Queries) CheckUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, checkUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Name,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, create_at, update_at, name)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, create_at, update_at, name
`

type CreateUserParams struct {
	ID       uuid.UUID
	CreateAt time.Time
	UpdateAt time.Time
	Name     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreateAt,
		arg.UpdateAt,
		arg.Name,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreateAt,
		&i.UpdateAt,
		&i.Name,
	)
	return i, err
}

const getId = `-- name: GetId :one
SELECT id FROM users
WHERE name = $1
`

func (q *Queries) GetId(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getId, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getName = `-- name: GetName :one
SELECT name FROM users
WHERE id = $1
`

func (q *Queries) GetName(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getUser = `-- name: GetUser :many
SELECT name FROM users
`

func (q *Queries) GetUser(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reset = `-- name: Reset :exec
DELETE FROM users
`

func (q *Queries) Reset(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, reset)
	return err
}
